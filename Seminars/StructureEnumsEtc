## **1. Struct**

### ✅ Task 1: Basic Structure  
Create a `struct` named `Car` with the following fields:  
- `brand` (string)  
- `year` (integer)  
- `price` (floating-point number)  

Write a program that creates an object of this type and displays its information.

---

### ✅ Task 2: Array of Structures  
Create an array of 5 cars and allow the user to input their data.  
Then print all the information on the screen.

---

### ✅ Task 3: Function Working with Structures  
Write a function that takes a `Car` object and prints its information.  
Use this function in your program.

---

### ✅ Task 4: Structure Inside a Structure  
Create a structure `Engine` that contains:  
- `horsePower` (integer)  
- `fuelType` (string)  

Add it as a member of `Car`, and update the program to use this new data.

---

## **2. Enum**

### ✅ Task 1: Using Enum  
Create an `enum` named `Day` that includes the days of the week.  
Write a function that takes a day and prints whether it's a weekday or a weekend.

---

### ✅ Task 2: Enum in a Structure  
Create an `enum` named `CarType` with values like `SEDAN`, `SUV`, and `TRUCK`.  
Use this enum in the `Car` structure to store the type of the car.

---

## **3. Union**

### ✅ Task 1: Basic Union Usage  
Create a `union` that can store either an integer or a character array (`char[]`).  
Demonstrate how it works in a simple program.

---

### ✅ Task 2: Union in a Structure  
Use a `union` inside a structure that can store either a `float` or an `int`, depending on the data type.  
Include a way to indicate which type is currently stored.

---

## **4. Typedef & Using**

### ✅ Task 1: Typedef  
Create a `typedef` for `unsigned int`, and use the new name to declare a variable.

---

### ✅ Task 2: Using for a Complex Type  
Use the `using` keyword to create an alias for a more complex type.

---

## **5. Namespace**

### ✅ Task 1: Custom Namespace  
Create your own namespace called `MathOperations` that contains functions for addition, subtraction, and multiplication.

---

### ✅ Task 2: Two Namespaces  
Create two namespaces that both contain functions with the same names but different behavior.  
Demonstrate how to use them with `using namespace` and with the full namespace path.

---
